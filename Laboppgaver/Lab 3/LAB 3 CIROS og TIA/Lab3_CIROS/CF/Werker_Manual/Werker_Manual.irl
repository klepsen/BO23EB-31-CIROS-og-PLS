PROGRAM IRL;

IMPORT DATALIST 'Werker_Manual.psl';
VAR
	TEACH ADD_JOINT 	:	HOME;
	TEACH ADD_JOINT 	:	POS2;
	TEACH ADD_JOINT 	:	POS3;
	TEACH ADD_JOINT 	:	POS4;
	TEACH ADD_JOINT 	:	POS5;
	TEACH ADD_JOINT 	:	CONV;
	TEACH ADD_JOINT 	:	POS6;
	TEACH ADD_JOINT 	:	POS7;
	TEACH ADD_JOINT 	:	FACE;
	TEACH ADD_JOINT 	:	WORK_POS;
	TEACH ADD_JOINT 	:	FACH1_auf;
	TEACH ADD_JOINT 	:	FACH1_zu;
	TEACH ADD_JOINT 	:	FACH2_auf;
	TEACH ADD_JOINT 	:	FACH2_zu;


	
VAR
	INPUT BOOL	:	MoveToHome	AT 2;
	INPUT BOOL	:	MoveToConveyor	AT 3;
	INPUT BOOL	:	MoveToFace	AT 4;
	INPUT BOOL	:	MoveToFach1	AT 5;
	INPUT BOOL	:	MoveToFach2	AT 6;

VAR
	OUTPUT BOOL	:	IsMoving	AT 0;
	OUTPUT BOOL	:	Lamp1		AT 1;
	OUTPUT BOOL	:	Lamp2		AT 2;

VAR
	REAL : currentPosition;

CONST
	REAL : inHomePos := 1;
	REAL : inConvPos := 2;
	REAL : inFacePos := 3;
	REAL : inWorkPos := 4;

PROCEDURE moveHome ();
BEGIN
	IsMoving := true;
	wait for not MoveToHome;
	
	if( currentPosition = inConvPos ) then
		MOVE PTP POS5 C_PTP;
		MOVE PTP POS4 C_PTP;
		MOVE PTP POS3 C_PTP;
		MOVE PTP POS2 C_PTP;
	endif;
	if( currentPosition = inFacePos ) then
		{intentionally left blank}
	endif;
	
	MOVE PTP HOME C_PTP;
	currentPosition := inHomePos;	
	IsMoving := false;
ENDPROC;

PROCEDURE moveConveyor ();
BEGIN
	IsMoving := true;
	wait for not MoveToConveyor;
	
	if( currentPosition = inHomePos ) then
		MOVE PTP POS2 C_PTP;
		MOVE PTP POS3 C_PTP;
		MOVE PTP POS4 C_PTP;
		MOVE PTP POS5 C_PTP;
	endif;
	if( currentPosition = inFacePos ) then
		MOVE PTP POS6 C_PTP;
	endif;
	if( currentPosition = inWorkPos ) then
		MOVE PTP POS6 C_PTP;
	endif;
	
	MOVE PTP CONV C_PTP;
	currentPosition := inConvPos;	
	IsMoving := false;
ENDPROC;

PROCEDURE moveFace ();
BEGIN
	IsMoving := true;
	wait for not MoveToFace;
	
	if( currentPosition = inHomePos ) then
		MOVE PTP POS7 C_PTP;		
	endif;
	if( currentPosition = inConvPos ) then
		MOVE PTP POS6 C_PTP;	
	endif;
	
	MOVE PTP FACE C_PTP;
	currentPosition := inFacePos;
	IsMoving := false;
ENDPROC;

PROCEDURE moveFach1 ();
BEGIN
	Lamp1 := true;
	IsMoving := true;
	wait for not MoveToFach1;
		
	MOVE PTP WORK_POS C_PTP;
	MOVE PTP FACH1_auf C_PTP;
	MOVE PTP FACH1_zu C_PTP;
	MOVE PTP WORK_POS C_PTP;
	
	currentPosition := inWorkPos;
	IsMoving := false;
	
	Lamp1 := false;
ENDPROC;

PROCEDURE moveFach2 ();
BEGIN
	Lamp2 := true;
	IsMoving := true;
	wait for not MoveToFach1;
		
	MOVE PTP WORK_POS C_PTP;
	MOVE PTP FACH2_auf C_PTP;
	MOVE PTP FACH2_zu C_PTP;
	MOVE PTP WORK_POS C_PTP;
	
	currentPosition := inWorkPos;
	IsMoving := false;
	
	Lamp2 := false;
ENDPROC;

BEGIN
	R_SPEED := 50;
	R_ACC := 50;
	R_C_CP := 50;
	R_C_PTP := 5000;

	MOVE PTP HOME;
	Lamp1 := false;
	Lamp2 := false;
	currentPosition := inHomePos;
	IsMoving := false;

	while( true )
		if( MoveToHome ) then
			moveHome();
		endif;
		if( MoveToConveyor ) then
			moveConveyor();
		endif;
		if( MoveToFace ) then
			moveFace();
		endif;
		if( MoveToFach1 ) then
			moveFach1();
		endif;
		if( MoveToFach2 ) then
			moveFach2();
		endif;
	endwhile;
ENDPROGRAM;
