PROGRAM IRL;

FROM MES_200 IMPORT ALL;
FROM RFID_100 IMPORT ALL;
FROM Applikationen IMPORT ALL;
FROM MES_Com IMPORT ALL;

VAR
	INT : appId;
	INT : appState;
	INT : appState_Waiting := 1;
	INT : appState_Working := 2;
	INT : appState_Ready := 3;
	INT : appState_Release := 4;
 

PROCESS ByPassAuslauf();
VAR
	INPUT BOOL	:	DI_WT_vor_Einschleusung	AT 35;
	INPUT BOOL	:	DI_BandAuslauf AT 15;

	OUTPUT BOOL	:	DO_Stopper3_Senken	AT 33;

BEGIN
	while( true )

		{Auf WT am Stopper warten}
		DO_Stopper3_Senken := false; 
		
		{WT am Stopper Ausschleusung oder App ist fertig}
		while( not ((appState = appState_Ready) OR DI_WT_vor_Einschleusung))
			wait for (appState = appState_Ready) OR DI_WT_vor_Einschleusung;
		endwhile;

		if( appState = appState_Ready ) then
			appState := appState_Release;			
			wait for DI_BandAuslauf;
			wait for not DI_BandAuslauf;
		endif;		

		if( DI_WT_vor_Einschleusung ) then
			DO_Stopper3_Senken := true;
			wait for not DI_WT_vor_Einschleusung;
			DO_Stopper3_Senken := false;
			
			wait for DI_BandAuslauf;
			wait for not DI_BandAuslauf;
		endif;
	endwhile;
ENDPROCESS;
	
{
 Weichenkontrolle
}
PROCESS ByPassControl();
VAR
	INPUT BOOL	:	DI_Stopper_vor_Ausschleusung	AT 8;
	INPUT BOOL	:	DI_Bit0	AT 9;
	INPUT BOOL	:	DI_Bit1	AT 10;
	INPUT BOOL	:	DI_Bit2 AT 11;
	INPUT BOOL	:	DI_Bit3	AT 12;
	INPUT BOOL	:	DI_Weiche_Gerade	AT 32;
	INPUT BOOL	:	DI_Weiche_Abbiegen	AT 33;
	INPUT BOOL	:	DI_Stopper_vor_Einschleusung	AT 34;
	INPUT BOOL	:	DI_WT_vor_Einschleusung	AT 35;
	INPUT BOOL	:	DI_BandAuslauf AT 15;
	INPUT BOOL	:	DI_StauByPass AT 29;
	INPUT BOOL	:	DI_StauGerade AT 36;

	OUTPUT BOOL	:	DO_Bandantrieb2_Rechtslauf	AT 15;
	OUTPUT BOOL	:	DO_Bandantrieb2_Linkslauf	AT 16;
	OUTPUT BOOL	:	DO_Bandantrieb2_Schleichgang AT 17;
	OUTPUT BOOL	:	DO_Stopper1_Senken	AT 7;
	OUTPUT BOOL	:	DO_ByPass_schliessen	AT 31;
	OUTPUT BOOL	:	DO_ByPass_oeffnen	AT 32;
	OUTPUT BOOL	:	DO_Stopper3_Senken	AT 33;
	
	BOOL : abbiegenLassen;

	RFIDFields : rfid;
	MESFields  : mes; 	

BEGIN
	appState := appState_Waiting;

	DO_Bandantrieb2_Rechtslauf := true;
	DO_Bandantrieb2_Linkslauf := false;
	
	while( true )
		abbiegenLassen := false;
	
		{Auf WT am Stopper warten}
		DO_Stopper1_Senken := false; 
		{DO_Stopper3_Senken := false; }
		
		{WT am Stopper Ausschleusung oder App ist fertig}
		while( not ((DI_Bit0 AND DI_Bit1 AND DI_Bit2 AND DI_Bit3) OR(appState = appState_Ready) OR DI_WT_vor_Einschleusung))
			wait for (DI_Bit0 AND DI_Bit1 AND DI_Bit2 AND DI_Bit3) OR (appState = appState_Ready) OR DI_WT_vor_Einschleusung;
		endwhile;

{		if( appState = appState_Ready ) then
			appState := appState_Release;	
			wait for DI_BandAuslauf;
			wait for not DI_BandAuslauf;
		endif;		

		if( DI_WT_vor_Einschleusung ) then
			DO_Stopper3_Senken := true;
			wait for not DI_WT_vor_Einschleusung;
			DO_Stopper3_Senken := false;
			wait for DI_BandAuslauf;
			wait for not DI_BandAuslauf;
		endif;
}
		{Stopper_vor_Einschleusung lesen}
		if( DI_Bit0 AND DI_Bit1 AND DI_Bit2 AND DI_Bit3 ) then

			{RFID lesen}
			RFIDA_ReadMES( rfid );
			
			if( myResourceId = 0 ) then
				if( DI_StauByPass = false ) then
					abbiegenLassen := true;
				endif;	
			else 
				{Enthält der RFID Auftragsdaten?}
				if( rfid.ONo <> 0 AND rfid.PNo <> 0 AND rfid.OPos <> 0 ) then
					{...die noch aktuell sind?}
					claimCommunication( true );
					GetOpForONoOPos( rfid.ONo, rfid.OPos );
					saveMESAnswer( mes );
					claimCommunication( false );
						
					if( mes.ONo <> 0 AND mes.OPos <> 0 ) then
						{Falls ja, abbiegen lassen falls Station fre}
						if( DI_StauByPass = false ) then
							abbiegenLassen := rfid.ResourceId = myResourceId;
						endif;
					endif;
				endif;
				{Ist der WT auch nicht an eine andere Resource gebunden?}
				if( rfid.ResourceId = 0 ) then
					{Gibt es einen Auftrag für meine Station?}
					claimCommunication( true );
					GetFirstOpForRsc( myResourceId );
					saveMESAnswer( mes );
					claimCommunication( false );
					
					if( mes.ONo <> 0 AND mes.OPos <> 0 ) then
						{Falls ja, abbiegen lassen falls Station fre}
						if( DI_StauByPass = false ) then
							abbiegenLassen := true;
						endif;	
					endif;			
				endif;
			endif;
			
			
			if( abbiegenLassen ) then
				DO_ByPass_schliessen := false;
				DO_ByPass_oeffnen := true;
				wait for DI_Weiche_Gerade = false;
				wait for DI_Weiche_Abbiegen = true;
				
				wait for not DI_StauByPass;
				
				DO_Stopper1_Senken := true;
				wait for not (DI_Bit0 AND DI_Bit1 AND DI_Bit2 AND DI_Bit3);
				DO_Stopper1_Senken := false; 
				
				{wait for DI_StauByPass;}
			else
				DO_ByPass_schliessen := true;
				DO_ByPass_oeffnen := false;
				wait for DI_Weiche_Gerade = true;
				wait for DI_Weiche_Abbiegen = false;
				
				wait for not DI_StauGerade;
				
				DO_Stopper1_Senken := true;
				wait for not (DI_Bit0 AND DI_Bit1 AND DI_Bit2 AND DI_Bit3);
				DO_Stopper1_Senken := false; 
				
				{wait for DI_StauGerade;}
			endif;	
		endif;
	endwhile;
ENDPROCESS;

{
 Weiche
}
PROCESS CPFactory_ByPass();
VAR
	INPUT BOOL	:	DI_StopperUnten	 AT 24;
	INPUT BOOL	:	DI_ID0		 AT 25;
	INPUT BOOL	:	DI_ID1		 AT 26;
	INPUT BOOL	:	DI_ID2		 AT 27;
	INPUT BOOL	:	DI_ID3	 	 AT 28;

	OUTPUT BOOL	:	DO_BandRechtslauf   	AT 18;
	OUTPUT BOOL	:	DO_BandLinkslauf    	AT 19;
	OUTPUT BOOL	:	DO_BandSchleichgang 	AT 20;
	OUTPUT BOOL	:	DO_StopperSenken   	AT 23;
	
	REAL : nextResourceId;
	
	RFIDFields : rfid;
	MESFields  : mes; 	
	
BEGIN
	{Band einschalten}
	DO_BandRechtslauf := true;	
	
	{MES Zustand initialisieren}
	setStateMESMode( true );
	setStateReset( false );
	
while( true )
	{Stopper ausfahren und auf WT warten}
	DO_StopperSenken := false; 
	wait for DI_ID0 AND DI_ID1 AND DI_ID2 AND DI_ID3;

	{DO_BandRechtslauf := false;}
	appState := appState_Working;
		
	nextResourceId := -1;		
	if( checkForWorkInThisStation( 2, rfid, mes ) ) then
		if( myResourceId = 0 ) then
			{Standarablauf}
			nextResourceId := App(appId, mes);
		else
			nextResourceId := callApp( 2, appId, rfid, mes );
		endif;
	endif;
	
	{Findet der nächste Arbeitsschritt in dieser Station statt?}
	if( myResourceId = 0 OR nextResourceId <> myResourceId ) then
		appState := appState_Ready;
		
		wait for (appState = appState_Release);
		
		{Falls nein: WT entlassen}		
		{Band starten}
		DO_BandRechtslauf := true;
		
		{Stopper einfahren und warten dass WT weiter gefahren ist}
		DO_StopperSenken := true;
		wait for not( DI_ID0 AND DI_ID1 AND DI_ID2 AND DI_ID3 );

		{Stopper ausfahren}
		DO_StopperSenken := false;
		wait for not DI_StopperUnten;
		
		appState := appState_Waiting;
	endif;
endwhile;
ENDPROCESS;

PROCEDURE startGM(IN INT: gmId);
BEGIN
	CASE gmId OF
	WHEN 2: 
		RUN CPFactory_ByPass;
		RUN ByPassAuslauf;
		RUN ByPassControl;
	ENDCASE;
ENDPROC;

PROCEDURE stopGM(IN INT: gmId);
BEGIN
	CASE gmId OF
	WHEN 2: 
		CANCEL CPFactory_ByPass;
		CANCEL ByPassAuslauf;
		CANCEL ByPassControl;
	ENDCASE;
ENDPROC;
{
 Hauptmodul
}
PROCEDURE CPFactory_StartByPass(IN INT: gmId; IN INT: _appId);
VAR
	INPUT BOOL	:	DI_SPSEnable 	 AT 16;
BEGIN
	appId := _appId;
while( true )
	setStateError( 0 );
	setStateAuto( false );

	WAIT FOR DI_SPSEnable;
	startGM(gmId);
	setStateError( -1 );
	setStateAuto( true );
	
	WAIT FOR NOT DI_SPSEnable;
	stopGM(gmId);
	
	resetAppOutputs();
endwhile;	

ENDPROC;
ENDPROGRAM;
