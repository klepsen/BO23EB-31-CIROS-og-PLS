PROGRAM IRL;

FROM MES_200 IMPORT ALL;
FROM RFID_100 IMPORT ALL;
FROM Applikationen IMPORT ALL;
FROM MES_Com IMPORT ALL;

VAR
	INT : appId;
	

FUNCTION pulseCountRobotino() : INT;
VAR
	INPUT BOOL	:	DI_Robotino 		AT 7;
	OUTPUT BOOL	:	DO_Robotino 		AT 6;

	INT : count;
	INT : t;
	INT : timeoutMAX;
	bool : needFalse;
	
	bool : robotinosState;
BEGIN
	count := 1;
	needFalse := true;
	timeoutMAX := 30;
	t := timeoutMAX;
	DO_Robotino := true;
	
	while( t > 0 )
		robotinosState := DI_Robotino;
	
		if( needFalse AND not robotinosState) then
			DO_Robotino := false;
			needFalse := false;
			t := timeoutMAX;
		endif;
		if( not needFalse AND robotinosState ) then
			DO_Robotino := true;
			needFalse := true;
			count := count + 1;
			t := timeoutMAX;
		endif;
		
		WAIT 0.04 SEC;
		t := t -1;
	endwhile;
	
	if( count = 1 ) then
		writeln( 'Robotino versucht ein Bauteil abzuholen/abzugeben welches nur im MES existiert. Wurden nach CIROS-Reset alle Puffer im MES gelöscht?', count );
		return( 4 );
	else if( count <> 4 AND count <> 8 ) then
			{writeln( 'Pulsecount wurde nicht exakt gezählt', count );}
			if( count < 6 ) then
				count := 4;
			else 
				count := 8;
			endif;
		endif;
	endif;
	
	return( count );
ENDFCT;	

PROCESS CPLab_Bridge();
VAR
	INPUT BOOL	:	DI_Weiche_Gerade	AT 0;
	INPUT BOOL	:	DI_Weiche_Abbiegen	AT 1;
	INPUT BOOL	:	DI_Stopper_Hauptband_offen	AT 2;
	INPUT BOOL	:	DI_Stopper_Einschleusung_offen	AT 3;
	INPUT BOOL	:	DI_Stopper_Ausschleusung_offen	AT 4;
	INPUT BOOL	:	DI_WT_vor_Ausschleusung	AT 5;
	INPUT BOOL	:	DI_WT_vor_Einschleusung	AT 6;
	INPUT BOOL	:	DI_Koppelsensor_Robotino AT 7;
	
	INPUT BOOL	:	DI_Bit0	AT 8;
	INPUT BOOL	:	DI_Bit1	AT 9;
	INPUT BOOL	:	DI_Bit2 AT 10;
	INPUT BOOL	:	DI_Bit3	AT 11;
	
	INPUT BOOL	:	DI_Bandanfang	AT 12;
	INPUT BOOL	:	DI_Bandende	AT 13;
	
	INPUT BOOL	: 	ActivateRobotinoMode AT 92;
	
	INPUT REAL	: 	AbbiegeModus AT 90;
	
	OUTPUT BOOL	:	DO_Weiche_abbiegen	AT -1;
	OUTPUT BOOL	:	DO_Stopper_Ausschleusung_oeffnen	AT 0;
	OUTPUT BOOL	:	DO_Stopper_Hauptband_oeffnen	AT 1;
	OUTPUT BOOL	:	DO_Stopper_Einschleusung_oeffnen	AT 2;
	OUTPUT BOOL	:	DO_Bandantrieb_Hauptband AT 3;
	OUTPUT BOOL	:	DO_Bandantrieb_Ausschleuseband AT 4;
	OUTPUT BOOL	:	DO_Bandantrieb_Einschleuseband AT 5;
	OUTPUT BOOL	:	DO_Koppelsensor_Robotino	AT 6;
	
	BOOL : abbiegenLassen;
	BOOL : WT_Ohne_Auftrag_Abbiegen_Lassen;
	
	int : pulseCount;
	
	RFIDFields : rfid;
	MESFields : mes;
BEGIN
	DO_Bandantrieb_Hauptband := true;
	DO_Bandantrieb_Ausschleuseband := true;
	DO_Bandantrieb_Einschleuseband := true;
	
	DO_Stopper_Ausschleusung_oeffnen := false;
	DO_Stopper_Hauptband_oeffnen := false;
	DO_Stopper_Einschleusung_oeffnen := false;

	setStateMESMode( true );
	setStateAuto( true );
	setStateReset( false );
	setStateError( -1 );
	
	while( true )
		{Auf WT am Stopper warten}
		{Stopper B und C ausfahren und auf WT warten}
		DO_Stopper_Ausschleusung_oeffnen := false; 
		DO_Stopper_Hauptband_oeffnen := false; 
		DO_Stopper_Einschleusung_oeffnen := false;
		
		{WT am Stopper Ausschleusung oder Stopper Einschleusung}
		while( not (DI_WT_vor_Ausschleusung OR DI_WT_vor_Einschleusung OR DI_Bit0 OR DI_Koppelsensor_Robotino) )
			wait for (DI_WT_vor_Ausschleusung OR DI_WT_vor_Einschleusung OR (DI_Bit0 AND DI_Bit1 AND DI_Bit2 AND DI_Bit3) OR DI_Koppelsensor_Robotino);
		endwhile;

		{Stopper_vor_Einschleusung durchfahren lassen}
		if( DI_WT_vor_Einschleusung ) then
			wait for not DI_Bandende;
			
			WAIT 1.0 SEC;
			DO_Stopper_Einschleusung_oeffnen := true;
			wait for not DI_WT_vor_Einschleusung;
			DO_Stopper_Einschleusung_oeffnen := false; 

			wait for DI_Bandende;
			
			if(myResourceId <> 0 ) then
			claimCommunication( true );
			SetBufPosWithCheck( myResourceId, 0, 0, 2, 1, 0, 0, 0 );
			claimCommunication( false );
		endif;	
		endif;	

		if( ActivateRobotinoMode ) then
			if( DI_Koppelsensor_Robotino ) then
				pulseCount := pulseCountRobotino();
				if( pulseCount = 4 AND DI_WT_vor_Ausschleusung ) then	
				{Ausschleusen}		
					DO_Koppelsensor_Robotino := true;
					
					DO_Stopper_Ausschleusung_oeffnen := true;
					wait for not DI_WT_vor_Ausschleusung;
					DO_Stopper_Ausschleusung_oeffnen := false; 
					
					wait for DI_Koppelsensor_Robotino = false;
					
					DO_Koppelsensor_Robotino := false;
					
					if(myResourceId <> 0 ) then
					claimCommunication( true );
					CheckBufPos( myResourceId, 1, 1, 0 );				
					claimCommunication( false );
					endif;
				else if( pulseCount = 8 AND NOT DI_WT_vor_Einschleusung ) then
				{Einschleusen}
					{Bereich muss frei sein}
					DO_Koppelsensor_Robotino := true;
					wait for DI_WT_vor_Einschleusung;
					
					DO_Koppelsensor_Robotino := false;
					wait for DI_Koppelsensor_Robotino = false;
					
					claimCommunication( true );
					CheckBufPos( myResourceId, 2, 1, -1 );
					claimCommunication( false );
				else 
					writeln( 'pulseCount war ', pulseCount, '. Kommando nicht verstanden!');
				endif;	endif;			
			endif;
		else
			{Stopper_vor_Ausschleusung immer durchwinken}
			if( DI_WT_vor_Ausschleusung ) then	
				DO_Stopper_Ausschleusung_oeffnen := true;
				wait for not DI_WT_vor_Ausschleusung;
				DO_Stopper_Ausschleusung_oeffnen := false; 
			endif;
		endif;
		if( DI_Bit0 AND DI_Bit1 AND DI_Bit2 AND DI_Bit3) then

			{RFID lesen}
			RFIDA_ReadMES( rfid );
			
			{Weichenstellung prüfen}
			if(myResourceId <> 0 ) then
				claimCommunication( true );
				GetShuntForTarget( myResourceId, 1, rfid.ResourceId, 1 );
				saveMESAnswer( mes );
				claimCommunication( false );
				
				if( mes.Parameter[1] = 2 ) then
					abbiegenLassen := true;
				else if( mes.Parameter[1] = 1 ) then
					abbiegenLassen := false;
				else 
					if( AbbiegeModus = 0 ) then
						WT_Ohne_Auftrag_Abbiegen_Lassen := false;
					else if( AbbiegeModus = 100 ) then
						WT_Ohne_Auftrag_Abbiegen_Lassen := true;
					else 
						WT_Ohne_Auftrag_Abbiegen_Lassen := not WT_Ohne_Auftrag_Abbiegen_Lassen;
					endif; endif;
					abbiegenLassen := WT_Ohne_Auftrag_Abbiegen_Lassen;
				endif; endif;
					
			else
				if( AbbiegeModus = 0 ) then
					WT_Ohne_Auftrag_Abbiegen_Lassen := false;
				else if( AbbiegeModus = 100 ) then
					WT_Ohne_Auftrag_Abbiegen_Lassen := true;
				else 
					WT_Ohne_Auftrag_Abbiegen_Lassen := not WT_Ohne_Auftrag_Abbiegen_Lassen;
				endif; endif;
				abbiegenLassen := WT_Ohne_Auftrag_Abbiegen_Lassen;
			endif;
			
			{Weiche stellen und WT Überfahrt abwarten}
			{if( mes.Parameter[1] = 2 ) then}
			if( abbiegenLassen AND NOT DI_WT_vor_Ausschleusung) then
				{Abbiegen}
				DO_Weiche_abbiegen := true;
				wait for not DI_Weiche_Gerade;
				wait for DI_Weiche_Abbiegen;
					
				DO_Stopper_Hauptband_oeffnen := true;
				wait for not (DI_Bit0 AND DI_Bit1 AND DI_Bit2 AND DI_Bit3);
				DO_Stopper_Hauptband_oeffnen := false; 
				
				wait for DI_WT_vor_Ausschleusung;
				
				{MES melden dass ein Pufferplatz belegt ist}
				if( myResourceId <> 0 AND ActivateRobotinoMode) then
					claimCommunication( true );
					if( rfid.PNo = 0 ) then	
						SetBufPosWithCheck( myResourceId, rfid.oNo, rfid.oPos, 1, 1, 0, 31, 0 );
					else
						SetBufPosWithCheck( myResourceId, rfid.oNo, rfid.oPos, 1, 1, 0, rfid.PNo, 0 );
					endif;
					claimCommunication( false );
				endif;				
			else if( not DI_Bandende ) then
				{Geradeaus}
				DO_Weiche_abbiegen := false;
				wait for DI_Weiche_Gerade;
				wait for not DI_Weiche_Abbiegen;
				
				DO_Stopper_Hauptband_oeffnen := true;
				wait for not (DI_Bit0 AND DI_Bit1 AND DI_Bit2 AND DI_Bit3);
				DO_Stopper_Hauptband_oeffnen := false; 

				wait for DI_Bandende;
			endif;	endif;
		endif;
	endwhile;
ENDPROCESS;


PROCEDURE startGM(IN INT: gmId);
BEGIN
	CASE gmId OF
	WHEN 1: 
		RUN CPLab_Bridge;
	default:
	ENDCASE;
ENDPROC;

PROCEDURE stopGM(IN INT: gmId);
BEGIN
	CASE gmId OF
	WHEN 1: 
		CANCEL CPLab_Bridge;
	default:
	ENDCASE;
ENDPROC;
{
 Hauptmodul
}
PROCEDURE CPLabBridge(IN INT: gmId; IN INT: _appId);
VAR
	INPUT BOOL	:	DI_SPSEnable	 AT 14;
BEGIN
	appId := _appId;
	
while( true )
	WAIT FOR DI_SPSEnable;
	startGM(gmId);
	WAIT FOR NOT DI_SPSEnable;
	stopGM(gmId);
	resetAppOutputs();
endwhile;	

ENDPROC;

ENDPROGRAM;
