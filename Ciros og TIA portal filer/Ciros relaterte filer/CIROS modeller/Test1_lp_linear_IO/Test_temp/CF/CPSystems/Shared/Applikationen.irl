PROGRAM IRL;

FROM MES_200 IMPORT ALL;
FROM APPLIKATION_LAGER IMPORT appLager;
FROM APPLIKATION_LABLAGER IMPORT appLagerLab;
FROM APPLIKATION_ROBOTER IMPORT ALL;
{
VAR
	INPUT BOOL	:	App_DI0	AT 0;
	INPUT BOOL	:	App_DI1 AT 1;
	INPUT BOOL	:	App_DI2	AT 2;
	INPUT BOOL	:	App_DI3	AT 3;
	INPUT BOOL	:	App_DI4	AT 4;
	INPUT BOOL	:	App_DI5	AT 5;
	INPUT BOOL	:	App_DI6	AT 6;
	INPUT BOOL	:	App_DI7	AT 7;

	INPUT REAL	:	AIN0	AT 0;
	INPUT REAL	:	AIN1	AT 1;
	INPUT REAL	:	AIN2	AT 2;
	INPUT REAL	:	AIN3	AT 3;

	OUTPUT BOOL	:	App_DO0	AT -1;
	OUTPUT BOOL	:	App_DO1	AT 0;
	OUTPUT BOOL	:	App_DO2	AT 1;
	OUTPUT BOOL	:	App_DO3	AT 2;
	OUTPUT BOOL	:	App_DO4	AT 3;
	OUTPUT BOOL	:	App_DO5	AT 4;
	OUTPUT BOOL	:	App_DO6	AT 5;
	OUTPUT BOOL	:	App_DO7	AT 6;
	
	OUTPUT REAL	:	AOUT0	AT 0;
	OUTPUT REAL	:	AOUT1	AT 1;
}	
	
PROCEDURE resetAppOutputs();
VAR
	OUTPUT BOOL	:	App_DO0	AT -1;
	OUTPUT BOOL	:	App_DO1	AT 0;
	OUTPUT BOOL	:	App_DO2	AT 1;
	OUTPUT BOOL	:	App_DO3	AT 2;
	OUTPUT BOOL	:	App_DO4	AT 3;
	OUTPUT BOOL	:	App_DO5	AT 4;
	OUTPUT BOOL	:	App_DO6	AT 5;
	OUTPUT BOOL	:	App_DO7	AT 6;
	
	OUTPUT REAL	:	AOUT0	AT 0;
	OUTPUT REAL	:	AOUT1	AT 1;
BEGIN
	App_DO0 := false;
	App_DO1 := false;
	App_DO2 := false;
	App_DO3 := false;
	App_DO4 := false;
	App_DO5 := false;
	App_DO6 := false;
	App_DO7 := false;
	
	AOUT0 := 0;
	AOUT1 := 0;
ENDPROC;

FUNCTION appBohren( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	INPUT BOOL	:	X_Achse_links	AT 0;
	INPUT BOOL	:	X_Achse_rechts  AT 1;
	INPUT BOOL	:	Frontschale_falsch_eingelegt	AT 2;
	INPUT BOOL	:	Frontschale_vorhanden	AT 3;
	INPUT BOOL	:	Z_Achse_oben	AT 4;
	INPUT BOOL	:	Z_Achse_unten	AT 5;
	INPUT BOOL	:	App_DI6	AT 6;
	INPUT BOOL	:	Rueckschale_vorhanden	AT 7;
	
	OUTPUT BOOL	:	X_Achse_nach_links	AT -1;
	OUTPUT BOOL	:	X_Achse_nach_rechts	AT 0;
	OUTPUT BOOL	:	Bohrer_1_ein	AT 1;
	OUTPUT BOOL	:	Bohrer_2_ein	AT 2;
	OUTPUT BOOL	:	Z_Achse_nach_oben	AT 3;
	OUTPUT BOOL	:	Z_Achse_nach_unten	AT 4;
	OUTPUT BOOL	:	Z_Achse_Bremse_oeffnen	AT 5;
	OUTPUT BOOL	:	App_DO7		AT 6;
BEGIN
	if( NOT Frontschale_falsch_eingelegt AND Frontschale_vorhanden AND NOT Rueckschale_vorhanden )THEN
	
		{Hinweis: Im CIROS Default-Modus OHNE manuell angepasste MES-Signale werden beide Seiten gebohrt.}
	
		{Falls gefordert, linke Seite anfahren & bohren}
		if (Parameter[1] = 1 or Parameter[1] = 3 or 
		   (Parameter[1] = 0 and myResourceID = 0)) then 
			{Anfahren}
			X_Achse_nach_links := true;
			X_Achse_nach_rechts:= false;
			WAIT FOR X_Achse_links;

			{Bohren}
			Bohrer_1_ein := true;
			Bohrer_2_ein := true;
			Z_Achse_Bremse_oeffnen := true;
			Z_Achse_nach_unten := true;
			Z_Achse_nach_oben := false;
			WAIT FOR Z_Achse_unten;
			Z_Achse_nach_unten := false;
			Z_Achse_nach_oben := true;
			WAIT 1 SEC;
			Z_Achse_nach_oben := true;
			WAIT FOR  Z_Achse_oben;
			Bohrer_1_ein := false;
			Bohrer_2_ein := false;
			Z_Achse_Bremse_oeffnen := false;
		endif;
		
		{Falls gefordert, rechte Seite anfahren & bohren}
		if (Parameter[1] > 1 or (Parameter[1] = 0 and myResourceID = 0)) then 
			{Anfahren}
			X_Achse_nach_links := false;
			X_Achse_nach_rechts:= true;
			WAIT FOR X_Achse_rechts;

			{Bohren}
			Bohrer_1_ein := true;
			Bohrer_2_ein := true;
			Z_Achse_Bremse_oeffnen := true;
			Z_Achse_nach_unten := true;
			Z_Achse_nach_oben := false;
			WAIT FOR Z_Achse_unten;
			Z_Achse_nach_unten := false;
			Z_Achse_nach_oben := true;
			WAIT 1 SEC;
			Z_Achse_nach_oben := true;
			WAIT FOR  Z_Achse_oben;
			Bohrer_1_ein := false;
			Bohrer_2_ein := false;
			Z_Achse_Bremse_oeffnen := false;
			
			{Zurück zur linken Ausgangsposition}
			X_Achse_nach_links := true;
			X_Achse_nach_rechts:= false;
		endif; 
	
		return( 0 );
	endif;
	
	if (NOT Frontschale_vorhanden) then
		return (1004);
	else if (Frontschale_falsch_eingelegt) then
		return (1006);
	else
		{ Hier gilt: 'Rueckschale_vorhanden' } 
		return (1003); 
	endif; endif;
ENDFCT;

FUNCTION appWenden( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	INPUT BOOL	:	Hubzylinder_oben	AT 0;
	INPUT BOOL	:	Hubzylinder_unten  AT 1;
	INPUT BOOL	:	Drehzylinder_0	AT 2;
	INPUT BOOL	:	Drehzylinder_180	AT 3;
	INPUT BOOL	:	Greifer_offen	AT 4;
	INPUT BOOL	:	Greifer_geschlossen	AT 5;
	INPUT BOOL	:	Stau_hinter_Modul	AT 6;
	INPUT BOOL	:	Werkstueck_vorhanden	AT 7;
	
	OUTPUT BOOL	:	Hubzylinder_auf	AT -1;
	OUTPUT BOOL	:	Hubzylinder_ab	AT 0;
	OUTPUT BOOL	:	Drehung_gegen_Uhrzeigersinn	AT 1;
	OUTPUT BOOL	:	Drehung_im_Uhrzeigersinn	AT 2;
	OUTPUT BOOL	:	Greifer_oeffnen	AT 3;
	OUTPUT BOOL	:	Greifer_schliessen	AT 4;
	OUTPUT BOOL	:	Zylinder_Klemmung_oeffnen	AT 5;
	OUTPUT BOOL	:	App_DO7		AT 6;
	
BEGIN
	WAIT FOR NOT Stau_hinter_Modul; 
	
	if Werkstueck_vorhanden THEN 
		Zylinder_Klemmung_oeffnen := true;
		
		Hubzylinder_ab := true;
		WAIT FOR Hubzylinder_unten;

		Hubzylinder_ab := false;
		Greifer_oeffnen := false;
		Greifer_schliessen := true;
		WAIT FOR Greifer_geschlossen;
		Hubzylinder_auf := true;
		WAIT FOR Hubzylinder_oben;

		Hubzylinder_auf := false;
		Drehung_im_Uhrzeigersinn := true;
		WAIT FOR Drehzylinder_180;

		Drehung_im_Uhrzeigersinn := false;
		Hubzylinder_ab := true;
		WAIT FOR Hubzylinder_unten;

		Hubzylinder_ab := false;
		Greifer_oeffnen := true;
		Greifer_schliessen := false;
		WAIT FOR Greifer_offen;
		Hubzylinder_auf := true;
		WAIT FOR Hubzylinder_oben;

		Hubzylinder_auf := false;
		Greifer_oeffnen := false;
		Drehung_gegen_Uhrzeigersinn := true;
		WAIT FOR Drehzylinder_0;

		Drehung_gegen_Uhrzeigersinn := false;
		
		Zylinder_Klemmung_oeffnen := false;
		return( 0 );
	endif;
	return( 1007 );
ENDFCT;

FUNCTION appPresse( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	INPUT BOOL	:	Hubzylinder_oben	AT 0;
	INPUT BOOL	:	Hubzylinder_unten  AT 1;
	INPUT BOOL	:	SensorGehaeuseVorhanden	AT 7;
	
	OUTPUT BOOL	:	Hubzylinder_auf	AT -1;
	OUTPUT BOOL	:	Hubzylinder_ab	AT 0;
	
BEGIN
	IF SensorGehaeuseVorhanden THEN
		Hubzylinder_ab := true;
		WAIT FOR Hubzylinder_unten;
		
		wait 2 SEC;
		
		Hubzylinder_ab := false;
		Hubzylinder_auf := true;
		WAIT FOR Hubzylinder_oben;
		Hubzylinder_auf := false;
		
		return 0 ;
	endif;
	RETURN 1;
ENDFCT;

FUNCTION appMuskelpresse( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	INPUT BOOL	:	Werkstueck_vorhanden AT 0;
	INPUT BOOL	:	Druck_erreicht  AT 4;
	
	INPUT REAL	:	Istwert_Druck  AT 0;
	INPUT REAL	:	Istwert_Kraft  AT 2;
	
	OUTPUT BOOL	:	Not_Aus_Ventil	AT -1;
	OUTPUT BOOL	:	DruckreglerDI1	AT 3;
	OUTPUT BOOL	:	DruckreglerDI2	AT 4;
	
	OUTPUT REAL	:	Stellwert_Druck  AT 0;
	
BEGIN
	IF Werkstueck_vorhanden THEN
	
		{Runterfahren bis Pressplatte aufliegt}
		Stellwert_Druck := 3;
		WAIT FOR Druck_erreicht;
		WAIT FOR Istwert_Kraft > 10; 
		
		{Druck erhöhen für Pressvorgang}
		Stellwert_Druck := 6;
		WAIT FOR Istwert_Kraft > 50; 
		WAIT 1 SEC;
		
		{Rauffahren}
		Stellwert_Druck := 0;
		WAIT FOR Druck_erreicht;
		WAIT 1 SEC;
		
		return 0 ;
	endif;
	RETURN 1;
ENDFCT;
	
FUNCTION appMagazin( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	INPUT BOOL	:	Hubzylinder_oben AT 0;
	INPUT BOOL	:	Hubzylinder_unten AT 1;
	INPUT BOOL	:	UntereKlinkeIstAusgefahren AT 2;
	INPUT BOOL	:	ObereKlinkeIstAusgefahren AT 3;
	INPUT BOOL	:	MagazinLeer AT 4;
	INPUT BOOL	:	TAW_1 AT 6;
	INPUT BOOL	:	TAW_2 AT 7;
	
	OUTPUT BOOL	:	Hubzylinder_auf	AT -1;
	OUTPUT BOOL	:	Hubzylinder_ab	AT 0;
	OUTPUT BOOL	:	Vereinzeler_oeffnen	AT 1;
	OUTPUT BOOL	:	Vereinzeler_schliessen	AT 2;
	OUTPUT BOOL	:	Zylinderklemmung_oeffnen AT 3;
	
BEGIN
	{ Kein - je nach Einsatz - Front oder Backcover im Magazin? }
	if( NOT MagazinLeer ) then
		return( 1 );
	endif;
	
	{Grundstellung}
	Zylinderklemmung_oeffnen := true;
	Hubzylinder_auf := true;
	Hubzylinder_ab := false;

	Vereinzeler_schliessen := false;
	Vereinzeler_oeffnen := true;
	
	WAIT FOR Hubzylinder_oben = true;
	WAIT FOR UntereKlinkeIstAusgefahren;	
	
	Zylinderklemmung_oeffnen := false;
	
	{Ablauf}
	if (TAW_1 AND NOT TAW_2) THEN
		Zylinderklemmung_oeffnen := true;

		Hubzylinder_auf := false;
		Hubzylinder_ab := true;
		WAIT FOR Hubzylinder_unten = true;

		Vereinzeler_schliessen := true;
		Vereinzeler_oeffnen := false;
		WAIT FOR ObereKlinkeIstAusgefahren;
		WAIT 1 SEC;		
		
		Hubzylinder_auf := true;
		Hubzylinder_ab := false;
		WAIT FOR Hubzylinder_oben = true;

		Vereinzeler_schliessen := false;
		Vereinzeler_oeffnen := true;
		WAIT FOR UntereKlinkeIstAusgefahren;
		WAIT 0.5 SEC;		
	
		Zylinderklemmung_oeffnen := false;
		
		return( 0 );
	endif;
	
	if (NOT TAW_1) then
		{ Keine Palette (falls FC vereinzelt wird) oder
		  kein Frontcover (falls BC vereinzelt wird) vorhanden! }
		return ( 2 ); 
	else 
		{ Bereits Frontcover (falls FC vereinzelt wird) oder 
		  bereits Backcover (falls BC vereinzelt wird) vorhanden! }
		return ( 3 ); 
	endif;
ENDFCT;

FUNCTION appMagazinFront( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	INPUT BOOL	:	Hubzylinder_oben AT 0;
	INPUT BOOL	:	Hubzylinder_unten AT 1;
	INPUT BOOL	:	UntereKlinkeIstAusgefahren AT 2;
	INPUT BOOL	:	ObereKlinkeIstAusgefahren AT 3;
	INPUT BOOL	:	MagazinLeer AT 4;
	INPUT BOOL	:	TAW_1 AT 6;
	INPUT BOOL	:	TAW_2 AT 7;
	
	OUTPUT BOOL	:	Hubzylinder_auf	AT -1;
	OUTPUT BOOL	:	Hubzylinder_ab	AT 0;
	OUTPUT BOOL	:	Vereinzeler_oeffnen	AT 1;
	OUTPUT BOOL	:	Vereinzeler_schliessen	AT 2;
	OUTPUT BOOL	:	Zylinderklemmung_oeffnen AT 3;
	
	{ Speicherung Rückgabewert. }
	int : result; 
BEGIN
	{ Frontcover vereinzeln. }
	result := appMagazin(Parameter); 
	
	{ Rückgabewert bestimmen. }
	if (result = 0) then
		{ Alles in Ordnung, kein Fehler! }
		return(0); 
	else if (result = 1) then
		{ Kein FC im Magazin!}
		return(1020); 
	else if (result = 2) then
		{ Keine Palette auf Warenträger!}
		return(1001);
	else
		{ FC bereits vorhanden! }
		return(1002);
	endif; endif; endif; 
ENDFCT;

FUNCTION appMagazinBack( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	INPUT BOOL	:	Hubzylinder_oben AT 0;
	INPUT BOOL	:	Hubzylinder_unten AT 1;
	INPUT BOOL	:	UntereKlinkeIstAusgefahren AT 2;
	INPUT BOOL	:	ObereKlinkeIstAusgefahren AT 3;
	INPUT BOOL	:	MagazinLeer AT 4;
	INPUT BOOL	:	TAW_1 AT 6;
	INPUT BOOL	:	TAW_2 AT 7;
	
	OUTPUT BOOL	:	Hubzylinder_auf	AT -1;
	OUTPUT BOOL	:	Hubzylinder_ab	AT 0;
	OUTPUT BOOL	:	Vereinzeler_oeffnen	AT 1;
	OUTPUT BOOL	:	Vereinzeler_schliessen	AT 2;
	OUTPUT BOOL	:	Zylinderklemmung_oeffnen AT 3;
	
	{ Speicherung Rückgabewert. }
	int : result; 
BEGIN
	{ Backcover vereinzeln. }
	result := appMagazin(Parameter); 

	{ Rückgabewert bestimmen. }
	if (result = 0) then
		{ Alles in Ordnung, kein Fehler! }
		return(0); 
	else if (result = 1) then
		{ Kein BC im Magazin!}
		return(1020); 
	else if (result = 2) then
		{ Kein FC auf Warenträger!}
		return(1004);
	else
		{ BC bereits vorhanden! }
		return(1003);
	endif; endif; endif; 
ENDFCT;

FUNCTION appKamera( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	INPUT BOOL	:	Kamera AT 3;
	INPUT BOOL	:	Kamera_IO AT 4;
	INPUT BOOL	:	Kamera_NIO AT 5;
	
	OUTPUT BOOL	:	TriggerSignal	AT 2;
	OUTPUT REAL	: 	Programm AT 0;

	int : result;
BEGIN
	Programm := Parameter[1];
	
	TriggerSignal := true;
	wait for Kamera;
	wait 1 sec;

	result := 0;
	if( Kamera_NIO ) then result := 5050; endif;
	
	TriggerSignal := false;
	wait for not Kamera;

	return( result );
ENDFCT;

FUNCTION appTunnelofen( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	INPUT REAL	:	Temperatur AT 0;
	
	OUTPUT BOOL	:	Heizung_einschalten	AT -1;
	OUTPUT BOOL	:	Heizleistung	AT 0;

BEGIN
	if( Temperatur < 60 ) then
		Heizung_einschalten := true;
		Heizleistung := true;	
		wait for ( Temperatur > 60 );
		Heizleistung := false;	
	endif;
	
	if( Temperatur < 70 ) then
		Heizung_einschalten := true;
		wait for ( Temperatur > 75 );
		Heizung_einschalten := false;	
	endif;
	
	wait for ( Temperatur < 75 );
	
	return( 0 );
ENDFCT;

{
FUNCTION appEntnahme( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	OUTPUT BOOL	:	Entnahme_Aktiv	AT -1;
	INPUT  BOOL	:	Entnahme_Fertig	AT 0;
BEGIN
	Entnahme_Aktiv := true;
	wait FOR not Entnahme_Fertig;
	Entnahme_Aktiv := false;
	wait FOR Entnahme_Fertig;
	return( 0 );
ENDFCT;

FUNCTION appNacharbeit( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	OUTPUT BOOL	:	Nacharbeit_Aktiv	AT -1;
	INPUT  BOOL	:	Nacharbeit_Fertig	AT 0;
BEGIN
	Nacharbeit_Aktiv := true;
	wait FOR not Nacharbeit_Fertig;
	Nacharbeit_Aktiv := false;
	wait FOR Nacharbeit_Fertig;
	return( 0 );
ENDFCT;
}
FUNCTION appWerkstueckausgabe( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	INPUT BOOL	:	Hubzylinder_oben AT 0;
	INPUT BOOL	:	Hubzylinder_unten AT 1;
	INPUT BOOL	:	Greifer_Offen AT 2;
	INPUT BOOL	:	Ablage_Links_Belegt AT 3;
	INPUT BOOL	:	Ablage_Rechts_Belegt AT 4;
	INPUT BOOL	:	Referenziert AT 5;
	INPUT BOOL	:	MotionComplete AT 6;
	INPUT BOOL	:	Ready AT 7;
	
	OUTPUT BOOL	:	Hubzylinder_auf	AT -1;
	OUTPUT BOOL	:	Hubzylinder_ab	AT 0;
	OUTPUT BOOL	:	Zylinderklemmung_oeffnen	AT 1;
	OUTPUT BOOL	:	Greifer_Oeffnen	AT 2;
	OUTPUT BOOL	:	Reglerfreigabe AT 3;
	OUTPUT BOOL	:	Bit0 AT 4;
	OUTPUT BOOL	:	Bit1 AT 5;
	OUTPUT BOOL	:	PosStart AT 6;
	
	BOOL : AblageAufLinks;
BEGIN
	Greifer_Oeffnen := true;

	Zylinderklemmung_oeffnen := true;
	Hubzylinder_auf := true;
	Hubzylinder_ab := false;
	wait for Hubzylinder_oben;
	
	{BandPos}
	Bit0 := true;
	Bit1 := true;
	Reglerfreigabe := true;
	PosStart := true;
	
	wait 0.1 sec;
	wait for MotionComplete;
	PosStart := false;
	
	{Teil holen}
	Hubzylinder_auf := false;
	Hubzylinder_ab := true;
	wait for Hubzylinder_unten;
	
	Greifer_Oeffnen := false;
	wait for not Greifer_Offen;
	
	Hubzylinder_auf := true;
	Hubzylinder_ab := false;
	wait for Hubzylinder_oben;	
	
	if( Parameter[1] = 1) then 
		wait for not Ablage_Links_Belegt;
		AblageAufLinks := true;
	else if( Parameter[1] = 2) then
		wait for not Ablage_Rechts_Belegt;
		AblageAufLinks := false;
	else 
		{Ablageposition anfahren}
		wait for not( Ablage_Links_Belegt AND Ablage_Rechts_Belegt );
		if( not Ablage_Links_Belegt ) then
			AblageAufLinks := true;
		else
			AblageAufLinks := false;
	endif; endif; endif;
	
	Bit1 := not AblageAufLinks;
	Bit0 := AblageAufLinks;

	Reglerfreigabe := true;
	PosStart := true;
	wait for not MotionComplete;
	wait for MotionComplete;
	PosStart := false;
	
	{Teil ablegen}
	Greifer_Oeffnen := true;
	wait for Greifer_Offen;
	WAIT 1 sec;


	{Und zurück}
	Bit1 := true;
	Bit0 := true;
	
	Reglerfreigabe := true;
	PosStart := true;
	wait for not MotionComplete;	
	wait for MotionComplete;
	PosStart := false;

	Zylinderklemmung_oeffnen := false;
	return( 0 );
ENDFCT;


FUNCTION appEtikettieren( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	INPUT BOOL	:	X_Achse_vorn AT 0;
	INPUT BOOL	:	X_Achse_hinten AT 1;
	INPUT BOOL	:	Z_Achse_oben AT 2;
	INPUT BOOL	:	Z_Achse_unten AT 3;
	INPUT BOOL	:	Werkstueck_vorhanden AT 4;
	INPUT BOOL	:	Vakuum_aufgebaut AT 5;

	
	OUTPUT BOOL	:	X_Achse_nach_vorn	AT -1;
	OUTPUT BOOL	:	Z_Achse_nach_oben	AT 1;
	OUTPUT BOOL	:	Z_Achse_nach_unten	AT 2;
	OUTPUT BOOL	:	Zylinderklemmung_oeffnen AT 3;
	OUTPUT BOOL	:	Vakuum_einschalten AT 4;
	OUTPUT BOOL	:	Blasen AT 5;
	OUTPUT BOOL	:	Schneidmotor_einschalten AT 6;
	
BEGIN
	if( not Werkstueck_vorhanden ) then
		return( 1 );
	endif;
	Zylinderklemmung_oeffnen := true;
	
	X_Achse_nach_vorn := false;
	Z_Achse_nach_oben := true;
	Z_Achse_nach_unten := false;
	Vakuum_einschalten := false;
	Blasen := false;
	Schneidmotor_einschalten := false;
	
	X_Achse_nach_vorn := true;
	wait for X_Achse_vorn;
	
	{Etikett holen}
	Blasen := true;
	Vakuum_einschalten := true;
	wait for Vakuum_aufgebaut;
	Schneidmotor_einschalten := true;
	Blasen := false;
	wait 1 sec;
	Schneidmotor_einschalten := false;
	
	{Etikett aufkleben}
	X_Achse_nach_vorn := false;
	wait for X_Achse_hinten;
	
	Z_Achse_nach_oben := false;
	Z_Achse_nach_unten := true;
	wait for Z_Achse_unten;
	
	Vakuum_einschalten := false;
	wait 0.1 sec;

	{Grundstellung}
	Z_Achse_nach_oben := true;
	Z_Achse_nach_unten := false;
	wait for Z_Achse_oben;

	Zylinderklemmung_oeffnen := false;
	return( 0 );
ENDFCT;


FUNCTION appMessenAnalog( IN MESFields : mes ) : int;
VAR 
	INPUT BOOL	:	WS_vorhanden AT 0;
	INPUT BOOL	:	H1Q1 AT 2;
	INPUT BOOL	:	H1Q2 AT 3;
	INPUT BOOL	:	H2Q1 AT 4;
	INPUT BOOL	:	H2Q2 AT 5;
	
	INPUT REAL 	: 	Links AT 0;
	INPUT REAL 	: 	Rechts AT 2;

	
	OUTPUT BOOL	:	Schlechtteil AT -1;
	OUTPUT BOOL	:	MessungLaeuft	AT 0;
	OUTPUT BOOL	:	Gutteil	AT 1;
	
	int : retCode;
	REAL : diff;
	REAL : nom;
	REAL : min;
	REAL : max;
BEGIN
	if( not WS_vorhanden ) then
		return( 1007 );
	endif;
	diff := Links - Rechts;

	nom := mes.Parameter[1] / 10;
	max := mes.Parameter[2] / 10;
	min := mes.Parameter[3] / 10;

	Gutteil := false;
	Schlechtteil := false;
	MessungLaeuft := true;
	WAIT 1.5 SEC;
	MessungLaeuft := false;
	
	{Standardablauf}
	if( max = 0 AND min = 0 ) then
		retcode := 5040;
		if( H1Q1 AND (NOT H1Q2) AND H2Q1 AND (NOT H2Q2) ) then
			retcode := 0;
		endif;
	else
		SetPar( mes.ONo, mes.OPos, mes.StepNo, mes.Parameter[1], mes.Parameter[2], mes.Parameter[3], Round(diff*10));
		
		if( diff >= min AND diff <= max ) then
			retCode := 0;
		else	
			retCode := 5040;
		endif;
	endif;

	if( retCode = 0 ) then Gutteil := true; endif;
	if( retCode = 5040 ) then Schlechtteil := true; endif;

	return( retCode );
ENDFCT;

FUNCTION appRobMontage( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	INPUT REAL 	: 	CIROS_Roboter_ID AT 96;
	INPUT BOOL	:	DI_SensorPaletteVorn	AT 57;
	INPUT BOOL	:	DI_SensorPaletteRichtigEingelegt	AT 59;
	INPUT BOOL 	: 	Platine_Ack AT 98;
	
	OUTPUT BOOL 	: 	Platine_Dec AT 99;
	

	real: programmNumber;
	bool: standardAblauf;
	int : retCode;
BEGIN
	programmNumber := Parameter[1];
	standardAblauf := programmNumber = 0;
	retCode := 0;
	
	
	
	{Standardablauf}
	if( standardAblauf ) then 
		programmNumber := 4;
		{Nur starten wenn Platinen da sind}
		wait for DI_SensorPaletteVorn AND DI_SensorPaletteRichtigEingelegt;
	endif;
	
	if( CIROS_Roboter_ID = 0) then
		retCode := RunProgram_Mitsubishi(programmNumber);
	endif;
	
{	if( standardAblauf ) then}
		Platine_Dec := true;
		wait for Platine_Ack;
		Platine_Dec := false;
		wait for not Platine_Ack;
{	endif;}

	return( retCode );
ENDFCT;

FUNCTION appRobCNCBeladen( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	INPUT REAL 	: 	CIROS_Roboter_ID AT 96;
	
	real: programmLoad;
	real: programmUnload;
	real: cncWorkingTime;
	
	int : retCode;
BEGIN
	retCode := 0;

	if( myResourceId = 0) then
		programmLoad := 1;
		programmUnload := 2;
		cncWorkingTime := 2;
	else
		programmLoad := Parameter[1];
		programmUnload := Parameter[3];
		cncWorkingTime := Parameter[4];
	endif;
	
	if( CIROS_Roboter_ID = 0) then
		retCode := RunProgram_Mitsubishi(programmLoad);
		
		wait cncWorkingTime sec;
		
		if( retCode = 0 ) then
			retCode := RunProgram_Mitsubishi(programmUnload);
		endif;
	endif;

	return( retCode );
ENDFCT;

FUNCTION appManual( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	OUTPUT BOOL	:	Worker_Pos_Home		AT -1;
	OUTPUT BOOL	:	Worker_Pos_Conveyor	AT 0;
	OUTPUT BOOL	:	Worker_Pos_Face		AT 1;
	OUTPUT BOOL	:	Replicate		AT 2;
	OUTPUT BOOL	:	Grip			AT 3;
	OUTPUT BOOL	:	Delete			AT 4;
	OUTPUT REAL	:	TeilNr			AT 1;
	
	INPUT  BOOL	:	Worker_Moving		AT 0;
	INPUT  BOOL	:	Has_Gripped		AT 1;
	
	INPUT REAL	:	workTime		AT 0;
	INPUT REAL	:	targetPart		AT 2;
	
	REAL : prg_number;
	REAL : sicherung_A;
	REAL : sicherung_B;
	REAL : platine;
	REAL : cover;
	
	REAL : work_part_nr;
	bool : prg_ok;
	bool : noPartPickup;
BEGIN
	prg_number := Parameter[1];
	sicherung_A := Parameter[2];
	sicherung_B := Parameter[3];
	platine := Parameter[4];
	cover := Parameter[5];
	
	work_part_nr := 0;
	noPartPickup := false;

	if( MyResourceId = 0 ) then
		{Standardablauf}
		work_part_nr := targetPart;
		Delete := true;
	else
		{Parameter check}
		prg_ok := false;
		if( prg_number = 1 ) then
			if not ( sicherung_A <> 0 OR sicherung_B <> 0 OR platine <> 120 OR cover <> 0) then
				work_part_nr := 120;
				Delete := false;
				prg_ok := true;
			endif;
		endif;
		if( prg_number = 2 ) then
			if not ( sicherung_A <> 130 OR sicherung_B <> 0 OR platine <> 120 OR cover <> 0) then
				work_part_nr := 122;
				Delete := false;
				prg_ok := true;
			endif;
		endif;
		if( prg_number = 3 ) then
			if not ( sicherung_A <> 0 OR sicherung_B <> 130 OR platine <> 120 OR cover <> 0) then
				work_part_nr := 121;
				Delete := false;
				prg_ok := true;
			endif;
		endif;		
		if( prg_number = 4 ) then
			if not ( sicherung_A <> 130 OR sicherung_B <> 130 OR platine <> 120 OR cover <> 0) then
				work_part_nr := 123;
				Delete := false;
				prg_ok := true;
			endif;
		endif;	
		if( prg_number = 5000 ) then
			if not ( sicherung_A <> 0 OR sicherung_B <> 0 OR platine <> 0 OR cover <> 0) then
				work_part_nr := 0;
				Delete := true;
				prg_ok := true;
			endif;
		endif;		
		if( cover <> 0 ) then
			if( cover >= 111 AND cover <= 114 OR cover = 210 OR cover = 310 OR cover = 410 OR cover = 510) then
				work_part_nr := cover;
				if( cover <= 114 ) then
					work_part_nr := cover - 21; {Spezialteilenummern für aufgelegten Rückschalen 90-93}
				endif;
				noPartPickup := true;
				Delete := false;
				prg_ok := true;
			endif;			
		endif;		
		
		if( not prg_ok ) then
			writeln( 'Handarbeitsplatz mit nicht unterstützten Parametern aufgerufen!', Parameter[1], Parameter[2], Parameter[3], Parameter[4], Parameter[5] );
			return( 1 );
		endif;
	endif;

	Worker_Pos_Home := false;
	Worker_Pos_Conveyor := true;
	Worker_Pos_Face := false;
	wait for Worker_Moving;
	Worker_Pos_Conveyor := false;
	wait for not Worker_Moving;
			
	if( not noPartPickup )then
		Grip := true;
		
		Worker_Pos_Home := false;
		Worker_Pos_Conveyor := false;
		Worker_Pos_Face := true;
		wait for Worker_Moving;
		Worker_Pos_Face := false;
		wait for not Worker_Moving;
	endif;

	Grip := false;	
	if( Has_Gripped ) then
		WAIT FOR not Has_Gripped;
	endif;
	
	TeilNr := work_part_nr;
	Replicate := true;
	wait workTime sec;
	Replicate := false;

	if( not noPartPickup )then
		if( work_part_nr > 0 ) then
			Grip := true;
			WAIT FOR Has_Gripped;
			
			Worker_Pos_Home := false;
			Worker_Pos_Conveyor := true;
			Worker_Pos_Face := false;
			wait for Worker_Moving;
			Worker_Pos_Conveyor := false;
			wait for not Worker_Moving;
		endif;
		
		if( Has_Gripped ) then
			Grip := false;
		endif;
	endif;
	
	Worker_Pos_Home := true;
	Worker_Pos_Conveyor := false;
	Worker_Pos_Face := false;
	wait for Worker_Moving;
	Worker_Pos_Home := false;
	wait for not Worker_Moving;
	
	return( 0 );
ENDFCT;

FUNCTION appPickByLight( IN ARRAY [1..7] OF REAL: Parameter ) : int;
VAR 
	OUTPUT BOOL	:	Worker_Pos_Home		AT -1;
	OUTPUT BOOL	:	Worker_Pos_Conveyor	AT 0;
	OUTPUT BOOL	:	Worker_Pos_Face		AT 1;
	OUTPUT BOOL	:	Replicate		AT 2;
	OUTPUT BOOL	:	Grip			AT 3;
	OUTPUT BOOL	:	Worker_Pos_Fach1	AT 4;
	OUTPUT BOOL	:	Worker_Pos_Fach2	AT 5;
	OUTPUT BOOL	:	Delete			AT 6;
	OUTPUT REAL	:	TeilNr			AT 1;
	
	INPUT  BOOL	:	Worker_Moving		AT 0;
	INPUT  BOOL	:	Has_Gripped		AT 1;
	
	INPUT REAL	:	workTime		AT 0;
	INPUT REAL	:	targetPart		AT 2;
	
	REAL : prg_number;
	REAL : sicherung_A;
	REAL : sicherung_B;
	REAL : platine;
	REAL : cover;
	
	REAL : work_part_nr;
	bool : prg_ok;
	bool : noPartPickup;
BEGIN
	prg_number := Parameter[1];
	sicherung_A := Parameter[2];
	sicherung_B := Parameter[3];
	platine := Parameter[4];
	cover := Parameter[5];
	
	work_part_nr := 0;
	noPartPickup := false;

	if( MyResourceId = 0 ) then
		{Standardablauf}
		work_part_nr := targetPart;
		Delete := true;
	else
		{Parameter check}
		prg_ok := false;
		if( prg_number = 1 ) then
			if not ( sicherung_A <> 0 OR sicherung_B <> 0 OR platine <> 120 OR cover <> 0) then
				work_part_nr := 120;
				Delete := false;
				prg_ok := true;
			endif;
		endif;
		if( prg_number = 2 ) then
			if not ( sicherung_A <> 130 OR sicherung_B <> 0 OR platine <> 120 OR cover <> 0) then
				work_part_nr := 122;
				Delete := false;
				prg_ok := true;
			endif;
		endif;
		if( prg_number = 3 ) then
			if not ( sicherung_A <> 0 OR sicherung_B <> 130 OR platine <> 120 OR cover <> 0) then
				work_part_nr := 121;
				Delete := false;
				prg_ok := true;
			endif;
		endif;		
		if( prg_number = 4 ) then
			if not ( sicherung_A <> 130 OR sicherung_B <> 130 OR platine <> 120 OR cover <> 0) then
				work_part_nr := 123;
				Delete := false;
				prg_ok := true;
			endif;
		endif;	
		if( prg_number = 5000 ) then
			if not ( sicherung_A <> 0 OR sicherung_B <> 0 OR platine <> 0 OR cover <> 0) then
				work_part_nr := 0;
				Delete := true;
				prg_ok := true;
			endif;
		endif;		
		if( cover <> 0 ) then
			if( cover >= 111 AND cover <= 114 OR cover = 210 OR cover = 310 OR cover = 410 OR cover = 510) then
				work_part_nr := cover;
				if( cover <= 114 ) then
					work_part_nr := cover - 21; {Spezialteilenummern für aufgelegten Rückschalen 90-93}
				endif;
				noPartPickup := true;
				Delete := false;
				prg_ok := true;
			endif;			
		endif;		
		
		if( not prg_ok ) then
			writeln( 'iPick mit nicht unterstützten Parametern aufgerufen!', Parameter[1], Parameter[2], Parameter[3], Parameter[4], Parameter[5] );
			return( 1 );
		endif;
	endif;



	
	
	Worker_Pos_Home := false;
	Worker_Pos_Conveyor := false;
	Worker_Pos_Face := false;
	Worker_Pos_Fach1 := false;
	Worker_Pos_Fach2 := false;
	
	Worker_Pos_Conveyor := true;
	wait for Worker_Moving;
	Worker_Pos_Conveyor := false;
	wait for not Worker_Moving;

	if not noPartPickup then
		Grip := true;
		
		Worker_Pos_Fach1 := true;
		wait for Worker_Moving;
		Worker_Pos_Fach1 := false;
		wait for not Worker_Moving;

		Worker_Pos_Fach2 := true;
		wait for Worker_Moving;
		Worker_Pos_Fach2 := false;
		wait for not Worker_Moving;
	
		Grip := false;	
		if( Has_Gripped ) then
			WAIT FOR not Has_Gripped;
		endif;
	endif;
	
	TeilNr := work_part_nr;
	Replicate := true;
	wait workTime sec;
	Replicate := false;

	if not noPartPickup then
		if( work_part_nr > 0 ) then
			Grip := true;
			WAIT FOR Has_Gripped;
			
			Worker_Pos_Conveyor := true;
			wait for Worker_Moving;
			Worker_Pos_Conveyor := false;
			wait for not Worker_Moving;
		endif;
		
		if( Has_Gripped ) then
			Grip := false;
		endif;
	endif;
	
	Worker_Pos_Home := true;
	wait for Worker_Moving;
	Worker_Pos_Home := false;
	wait for not Worker_Moving;
	
	return( 0 );
ENDFCT;

FUNCTION App( IN INT: applicationID; IN MESFields : mes ) : int;
BEGIN
	if( applicationID = 0 ) then return( 0 ); endif;
	if( applicationID = 1 ) then return( appBohren( mes.Parameter ) ); endif;
	if( applicationID = 2 ) then return( appWenden( mes.Parameter ) ); endif;
	if( applicationID = 3 ) then return( appPresse( mes.Parameter ) ); endif;
	if( applicationID = 4 ) then return( appMuskelpresse( mes.Parameter ) ); endif;
{	if( applicationID = 5 ) then return( appMagazin( mes.Parameter ) ); endif;}
	if( applicationID = 6 ) then return( appKamera( mes.Parameter ) ); endif;
	if( applicationID = 7 ) then return( appTunnelofen( mes.Parameter ) ); endif;
{	if( applicationID = 8 ) then return( appEntnahme( mes.Parameter ) ); endif;
	if( applicationID = 9 ) then return( appNacharbeit( mes.Parameter ) ); endif;}
	if( applicationID = 10 ) then return( appWerkstueckausgabe( mes.Parameter ) ); endif;
	if( applicationID = 11 ) then return( appEtikettieren( mes.Parameter ) ); endif;
	if( applicationID = 12 ) then return( appMessenAnalog( mes ) ); endif;
	if( applicationID = 13 ) then return( appLager( mes.Parameter ) ); endif;
	if( applicationID = 14 ) then return( appRobMontage(  mes.Parameter ) ); endif;
	if( applicationID = 15 ) then return( appRobCNCBeladen(  mes.Parameter ) ); endif;
	if( applicationID = 16 ) then return( appLagerLab( mes.Parameter ) ); endif;
	if( applicationID = 17 ) then return( appManual( mes.Parameter ) ); endif;
	if( applicationID = 18 ) then return( appPickByLight( mes.Parameter ) ); endif;	
	if( applicationID = 19 ) then return( appMagazinFront( mes.Parameter ) ); endif;	
	if( applicationID = 20 ) then return( appMagazinBack( mes.Parameter ) ); endif;	
	return( 0 );
ENDFCT;

ENDPROGRAM;
