PROGRAM IRL;

FROM MES_200 IMPORT ALL;
FROM RFID_100 IMPORT ALL;
FROM Applikationen IMPORT ALL;
FROM MES_COM IMPORT ALL;


VAR
	INT : appId;
	
	INT : appState;
	INT : appState_Waiting := 1;
	INT : appState_Working := 2;
	INT : appState_Ready := 3;
	INT : appState_Release := 4;

	INT : boxState := 0; 

PROCESS Kistenband();
VAR
	INPUT BOOL	:	DI_SensorPaletteVorn	AT 57;
	INPUT BOOL	:	DI_SensorPaletteHinten	AT 58;
	INPUT BOOL	:	DI_SensorPaletteRichtigEingelegt	AT 59;
	INPUT BOOL	:	DI_IndexiereinheitVorn	AT 60;
	INPUT BOOL	:	DI_IndexiereinheitHinten	AT 61;
	INPUT BOOL 	:       DI_LeuchttasterGelb	AT 62;

	OUTPUT BOOL	: 	DO_ExtIndexBolt	AT 55;
	OUTPUT BOOL	: 	DO_BeltOnInDir	AT 56;
	OUTPUT BOOL	: 	DO_BeltOnOutDir	AT 57;
	OUTPUT BOOL	: 	DO_PalAckLampOn	AT 58;

	OUTPUT REAL 	: 	O_PCBPalletNr AT 4;
	
	OUTPUT BOOL 	: 	Platine_Ack AT 98;
	INPUT BOOL 	: 	Platine_Dec AT 99;
	
	INT : currPos;
BEGIN
	currPos := 0;

while true
	boxState := 0; 
	DO_PalAckLampOn := true;
	O_PCBPalletNr := 0;

	DO_ExtIndexBolt := false;
	{Kiste nach hinten fahren}
	DO_BeltOnInDir := false;
	DO_BeltOnOutDir := true;
	wait for DI_SensorPaletteHinten;
	
	{Auf Nachfüllung warten}
	wait for DI_LeuchttasterGelb;
	DO_PalAckLampOn := false;
	
	{Kiste nach vorn fahren}
	DO_BeltOnInDir := true;
	DO_BeltOnOutDir := false;
	wait for DI_SensorPaletteVorn AND DI_SensorPaletteRichtigEingelegt;
	DO_ExtIndexBolt := true;
	
	boxState := 1; 
	currPos := 1;
	while( currPos < 11 )
		O_PCBPalletNr := currPos;
		
		wait for Platine_Dec;
		Platine_Ack := true;
		currPos := currPos + 1;
		
		wait for not Platine_Dec;
		Platine_Ack := false;
	endwhile;
endwhile;	
	
ENDPROCESS;
 
PROCESS ByPassAuslauf();
VAR
	INPUT BOOL	:	DI_WT_vor_Einschleusung	AT 25;
	INPUT BOOL	:	DI_BandAuslauf AT 31;

	OUTPUT BOOL	:	DO_Stopper3_Senken	AT 23;

BEGIN
	while( true )

		{Auf WT am Stopper warten}
		DO_Stopper3_Senken := false; 
		
		{WT am Stopper Ausschleusung oder App ist fertig}
		while( not ((appState = appState_Ready) OR DI_WT_vor_Einschleusung))
			wait for (appState = appState_Ready) OR DI_WT_vor_Einschleusung;
		endwhile;

		if( appState = appState_Ready ) then
			appState := appState_Release;			
			wait for DI_BandAuslauf;
			wait for not DI_BandAuslauf;
		endif;		

		if( DI_WT_vor_Einschleusung ) then
			DO_Stopper3_Senken := true;
			wait for not DI_WT_vor_Einschleusung;
			DO_Stopper3_Senken := false;
			
			wait for DI_BandAuslauf;
			wait for not DI_BandAuslauf;
		endif;
	endwhile;
ENDPROCESS;

{
 ByPassRoboterkontrolle
}
PROCESS ByPassRoboterControl();
VAR
	INPUT BOOL	:	DI_Stopper_vor_Ausschleusung	AT 8;
	INPUT BOOL	:	DI_Bit0	AT 9;
	INPUT BOOL	:	DI_Bit1	AT 10;
	INPUT BOOL	:	DI_Bit2 AT 11;
	INPUT BOOL	:	DI_Bit3	AT 12;
	INPUT BOOL	:	DI_Weiche_Gerade	AT 6;
	INPUT BOOL	:	DI_Weiche_Abbiegen	AT 7;
	INPUT BOOL	:	DI_Stopper_vor_Einschleusung	AT 24;
	INPUT BOOL	:	DI_WT_vor_Einschleusung	AT 25;
	INPUT BOOL	:	DI_BandAuslauf AT 31;
	INPUT BOOL	:	DI_StauByPass AT 5;
	INPUT BOOL	:	DI_StauGerade AT 26;

	INPUT BOOL	: 	DI_Stauueberwachung AT 90;
	INPUT BOOL	: 	DI_Bandabschaltung  AT 91;

	OUTPUT BOOL	:	DO_Bandantrieb1_Rechtslauf	AT 15;
	OUTPUT BOOL	:	DO_Bandantrieb1_Linkslauf	AT 16;
	OUTPUT BOOL	:	DO_Bandantrieb1_Schleichgang 	AT 17;
	OUTPUT BOOL	:	DO_Bandantrieb2_Rechtslauf	AT 18;
	OUTPUT BOOL	:	DO_Bandantrieb2_Linkslauf	AT 19;
	OUTPUT BOOL	:	DO_Bandantrieb2_Schleichgang 	AT 20;
	OUTPUT BOOL	:	DO_Stopper1_Senken	AT 7;
	OUTPUT BOOL	:	DO_ByPass_schliessen	AT 5;
	OUTPUT BOOL	:	DO_ByPass_oeffnen	AT 6;
	OUTPUT BOOL	:	DO_Stopper3_Senken	AT 23;
	
	BOOL : abbiegenLassen;

	RFIDFields : rfid;
	MESFields  : mes; 	

BEGIN
	appState := appState_Waiting;
	
	{Band 1 immer ein}
	DO_Bandantrieb1_Rechtslauf := true;
	DO_Bandantrieb1_Linkslauf := false;
	DO_Bandantrieb1_Schleichgang := false;

	DO_Bandantrieb2_Rechtslauf := true;
	DO_Bandantrieb2_Linkslauf := false;
	DO_Bandantrieb2_Schleichgang := false;
	
	while( true )
		abbiegenLassen := false;
	
		{Auf WT am Stopper warten}
		DO_Stopper1_Senken := false; 
		{DO_Stopper3_Senken := false; }
		
		{WT am Stopper Ausschleusung oder App ist fertig}
		{wait for DI_Bit0 OR DI_Bit1 OR DI_Bit2 OR DI_Bit3;}
		while( not RFIDAInventory() )
			wait 0.5 SEC;
		endwhile;

		{Stopper_vor_Einschleusung lesen}
		RFIDA_ReadMES( rfid, 'ByPassRoboterControl' );

		if( myResourceId = 0 ) then
			if( DI_StauByPass = false ) then
				abbiegenLassen := true;
			endif;	
		else 
			{Enthält der RFID Auftragsdaten?}
			if( rfid.ONo <> 0 AND rfid.PNo <> 0 AND rfid.OPos <> 0 ) then
				{...die noch aktuell sind?}
				claimCommunication( true );
				GetOpForONoOPos( rfid.ONo, rfid.OPos );
				saveMESAnswer( mes );
				claimCommunication( false );
				
				if( mes.ONo <> 0 AND mes.OPos <> 0 ) then
					{Falls ja, abbiegen lassen falls Station fre}
					if( DI_StauByPass = false ) then
						abbiegenLassen := rfid.ResourceId = myResourceId;
					endif;
				endif;
			endif;
			{Ist der WT auch nicht an eine andere Resource gebunden?}
			if( rfid.ResourceId = 0 ) then
				{Gibt es einen Auftrag für meine Station?}
				claimCommunication( true );
				GetFirstOpForRsc( myResourceId );
				saveMESAnswer( mes );
				claimCommunication( false );
				
				if( mes.ONo <> 0 AND mes.OPos <> 0 ) then
					{Falls ja, abbiegen lassen falls Station fre}
					if( DI_StauByPass = false ) then
						abbiegenLassen := true;
					endif;	
				endif;			
			endif;
		endif;
		
		
		if( abbiegenLassen ) then
			DO_ByPass_schliessen := false;
			DO_ByPass_oeffnen := true;
			wait for DI_Weiche_Gerade = false;
			wait for DI_Weiche_Abbiegen = true;
			
			wait for not DI_StauByPass;
		else
			DO_ByPass_schliessen := true;
			DO_ByPass_oeffnen := false;
			wait for DI_Weiche_Gerade = true;
			wait for DI_Weiche_Abbiegen = false;
			
			wait for not DI_StauGerade;
		endif;		

		DO_Stopper1_Senken := true;
		{wait for not (DI_Bit0 OR DI_Bit1 OR DI_Bit2 OR DI_Bit3);}
		while( RFIDAInventory() )
			wait 0.1 SEC;
		endwhile;
		DO_Stopper1_Senken := false; 
	endwhile;
ENDPROCESS;

{
 Weiche
}
PROCESS CPFactory_Roboter();
VAR
	INPUT BOOL	:	DI_StopperUnten	 AT 0;
	INPUT BOOL	:	DI_Bit0		 AT 1;
	INPUT BOOL	:	DI_Bit1		 AT 2;
	INPUT BOOL	:	DI_Bit2		 AT 3;
	INPUT BOOL	:	DI_Bit3	 	 AT 4;
	
	INPUT BOOL	:	DI_PaletteLinks	 AT 30;
	INPUT BOOL	:	DI_PaletteRechts AT 31;
	
	INPUT BOOL	: 	DI_Stauueberwachung AT 90;
	INPUT BOOL	: 	DI_Bandabschaltung  AT 91;
	
	INPUT REAL 	: 	CIROS_Roboter_ID AT 96;

	OUTPUT BOOL	:	DO_BandRechtslauf   	AT 21;
	OUTPUT BOOL	:	DO_BandLinkslauf    	AT 22;
	OUTPUT BOOL	:	DO_BandSchleichgang 	AT 14;
	OUTPUT BOOL	:	DO_StopperSenken   	AT -1;
		
	REAL : nextResourceId;
	
	RFIDFields : rfid;
	MESFields  : mes; 	
	
	BOOL : tempBool;
	
BEGIN
	{Band einschalten}
	DO_BandRechtslauf := true;	
	
	{MES Zustand initialisieren}
	setStateMESMode( true );
	setStateAuto( true );
	setStateReset( false );
	setStateError( -1 );
	
while( true )
	nextResourceId := -1;

	{Stopper ausfahren und auf WT warten}
	DO_StopperSenken := false; 
	{wait for DI_Bit0 OR DI_Bit1 OR DI_Bit2 OR DI_Bit3;}
	while( not RFIDBInventory() )
		wait 0.5 SEC;
	endwhile;


	appState := appState_Working;
		
	nextResourceId := -1;		
	if( checkForWorkInThisStation( 2, rfid, mes, 'CPFactory_Roboter' ) ) then
{		if( DI_Bandabschaltung ) then
			DO_BandRechtslauf := false;
		endif;
}
		if( appId = 14 ) then
			while(boxState = 0)
				wait for boxState = 1; 
			endwhile;
		endif;
		if( myResourceId = 0 ) then
			{Standarablauf}
			nextResourceId := App(appId, mes);
		else
			nextResourceId := callApp( 2, appId, rfid, mes );
		endif;
	endif;
	
	{Findet der nächste Arbeitsschritt in dieser Station statt?}
	if( myResourceId = 0 OR nextResourceId <> myResourceId ) then
	
		appState := appState_Ready;
		
		wait for (appState = appState_Release);

		{Falls nein: WT entlassen}		
		{Band starten}
		DO_BandRechtslauf := true;
		
		if( DI_Stauueberwachung ) then
			wait for not DI_PaletteRechts;
		endif;
		
		{Stopper einfahren und warten dass WT weiter gefahren ist}
		DO_StopperSenken := true;
		{wait for not( DI_Bit0 OR DI_Bit1 OR DI_Bit2 OR DI_Bit3 );}
		while( RFIDBInventory() )
			wait 0.1 SEC;
		endwhile;
		{Stopper ausfahren}
		DO_StopperSenken := false;
		wait for not DI_StopperUnten;
				
		appState := appState_Waiting;
	endif;
endwhile;
ENDPROCESS;

PROCEDURE startGM(IN INT: gmId);
BEGIN
	CASE gmId OF
	WHEN 4: 
		RUN ByPassRoboterControl;
		RUN ByPassAuslauf;
		RUN CPFactory_Roboter;
		if( appId = 14 ) then
			RUN Kistenband;
		endif;
	ENDCASE;
ENDPROC;

PROCEDURE stopGM(IN INT: gmId);
BEGIN
	CASE gmId OF
	WHEN 4: 
		CANCEL ByPassRoboterControl;
		CANCEL ByPassAuslauf;
		CANCEL CPFactory_Roboter;
		if( appId = 14 ) then
			CANCEL Kistenband;
		endif;
	ENDCASE;	
ENDPROC;
{
 Hauptmodul
}
PROCEDURE CPFactory_StartRoboter(IN INT: gmId; IN INT: _appId);
VAR
	INPUT BOOL	:	DI_SPSEnable 	 AT 16;
BEGIN
	appId := _appId;
	
while( true )
	setStateError( 0 );
	setStateAuto( false );

	WAIT FOR DI_SPSEnable;
	startGM(gmId);
	setStateError( -1 );
	setStateAuto( true );
	
	WAIT FOR NOT DI_SPSEnable;
	stopGM(gmId);
	
	resetAppOutputs();
endwhile;	

ENDPROC;
ENDPROGRAM;
