PROGRAM IRL;

FROM MES_200 IMPORT ALL;
FROM RFID_100 IMPORT ALL;
FROM Applikationen IMPORT ALL;
FROM MES_Com IMPORT ALL;

VAR
	INT : appId;
	
FUNCTION pulseCountRobotino() : INT;
VAR
	INPUT BOOL	:	DI_Robotino 		AT 29;
	OUTPUT BOOL	:	DO_Robotino 		AT 28;

	INT : count;
	INT : t;
	INT : timeoutMAX;
	bool : needFalse;
	
	bool : robotinosState;
BEGIN
	count := 1;
	needFalse := true;
	timeoutMAX := 30;
	t := timeoutMAX;
	DO_Robotino := true;
	
	while( t > 0 )
		robotinosState := DI_Robotino;
	
		if( needFalse AND not robotinosState) then
			DO_Robotino := false;
			needFalse := false;
			t := timeoutMAX;
		endif;
		if( not needFalse AND robotinosState ) then
			DO_Robotino := true;
			needFalse := true;
			count := count + 1;
			t := timeoutMAX;
		endif;
		
		WAIT 0.04 SEC;
		t := t -1;
	endwhile;
	
	if( count = 1 ) then
		writeln( 'Robotino versucht ein Bauteil abzuholen/abzugeben welches nur im MES existiert. Wurden nach CIROS-Reset alle Puffer im MES gelöscht?', count );
		return( 4 );
	else if( count <> 4 AND count <> 8 ) then
			{writeln( 'Pulsecount wurde nicht exakt gezählt', count );}
			if( count < 6 ) then
				count := 4;
			else 
				count := 8;
			endif;
		endif;
	endif;
	
	return( count );
ENDFCT;	

{
 Weichenkontrolle
}
PROCESS JunctionControl();
VAR
	INPUT BOOL	:	DI_Stopper_vor_Ausschleusung	AT 8;
	INPUT BOOL	:	DI_Bit0	AT 9;
	INPUT BOOL	:	DI_Bit1	AT 10;
	INPUT BOOL	:	DI_Bit2 AT 11;
	INPUT BOOL	:	DI_Bit3	AT 12;
	INPUT BOOL	:	DI_Weiche_Gerade	AT 24;
	INPUT BOOL	:	DI_Weiche_Abbiegen	AT 25;
	INPUT BOOL	:	DI_Koppelsensor_Robotino AT 29;
	INPUT BOOL	:	DI_Stopper_vor_Einschleusung	AT 32;
	INPUT BOOL	:	DI_WT_vor_Einschleusung	AT 33;
	INPUT BOOL	:	DI_Weichenbereich_Frei_Abbiegen AT 34;
	INPUT BOOL	:	DI_Weichenbereich_Frei_Gerade AT 37;
	INPUT BOOL 	: 	WT_AufAusschleusung AT 50;
	INPUT BOOL	: 	ActivateRobotinoMode AT 92;
	INPUT REAL	: 	AbbiegeModus AT 90;

	OUTPUT BOOL	:	DO_Stopper_vor_Ausschleusung	AT 7;
	OUTPUT BOOL	:	DO_Bandantrieb3_Schleichgang 	AT 14;
	OUTPUT BOOL	:	DO_Bandantrieb2_Rechtslauf	AT 18;
	OUTPUT BOOL	:	DO_Bandantrieb2_Linkslauf	AT 19;
	OUTPUT BOOL	:	DO_Bandantrieb2_Schleichgang 	AT 20;
	OUTPUT BOOL	:	DO_BandAusschleusung_Rechtslauf	AT 21;
	OUTPUT BOOL	:	DO_BandAusschleusung_Linkslauf	AT 22;
	OUTPUT BOOL	:	DO_Ausschleusung		AT 23;
	OUTPUT BOOL	:	DO_Koppelsensor_Robotino	AT 28;
	OUTPUT BOOL	:	DO_Stopper_vor_Einschleusung	AT 31;
	OUTPUT BOOL 	: 	FakeStopperAufAusschleusung 	AT 50;
	
	BOOL : abbiegenLassen;
	BOOL : WT_Ohne_Auftrag_Abbiegen_Lassen;
	
	INT : pulseCount; 
	
	RFIDFields : rfid;
	MESFields : mes;
BEGIN
	DO_Bandantrieb2_Rechtslauf := true;
	DO_Bandantrieb2_Linkslauf := false;
	DO_BandAusschleusung_Rechtslauf := true;
	DO_BandAusschleusung_Linkslauf := false;
		
	while( true )
		{Auf WT am Stopper warten}
		{Stopper B und C ausfahren und auf WT warten}
		DO_Stopper_vor_Ausschleusung := false; 
		DO_Stopper_vor_Einschleusung := false; 
		{WT am Stopper Ausschleusung oder Stopper Einschleusung}
		wait for DI_WT_vor_Einschleusung OR (DI_Bit0 OR DI_Bit1 OR DI_Bit2 OR DI_Bit3) OR DI_Koppelsensor_Robotino;

		{Stopper_vor_Einschleusung durchfahren lassen}
		if( DI_WT_vor_Einschleusung ) then
			wait for not DI_Weichenbereich_Frei_Gerade;
			
			WAIT 1.0 SEC;
			DO_Stopper_vor_Einschleusung := true;
			wait for not DI_WT_vor_Einschleusung;
			DO_Stopper_vor_Einschleusung := false; 

			wait for DI_Weichenbereich_Frei_Gerade;

			if(myResourceId <> 0 ) then
			claimCommunication( true );
			SetBufPosWithCheck( myResourceId, 0, 0, 2, 1, 0, 0, 0 );
			claimCommunication( false );
			endif;			
		endif;		
		
		if( ActivateRobotinoMode ) then
			if( DI_Koppelsensor_Robotino ) then
				pulseCount := pulseCountRobotino();
				if( pulseCount = 4 AND DI_Weichenbereich_Frei_Abbiegen ) then	
				{Ausschleusen}		
					DO_Koppelsensor_Robotino := true;
					
					DO_BandAusschleusung_Rechtslauf := true;
					wait for DI_Koppelsensor_Robotino = false;

					DO_Koppelsensor_Robotino := false;
					
					{Warten bis RFM den Buffer geleert hat.}
					if(myResourceId <> 0 ) then
						claimCommunication( true );
						CheckBufPos( myResourceId, 1, 1, 0 );				
						claimCommunication( false );
					endif;
				else 
				{Einschleusen}
					if( pulseCount = 8 AND NOT DI_WT_vor_Einschleusung ) then
					{Bereich muss frei sein}
						DO_Koppelsensor_Robotino := true;
						wait for DI_WT_vor_Einschleusung;
						DO_Koppelsensor_Robotino := false;
						wait for DI_Koppelsensor_Robotino = false;
						
						{Warten bis RFM den Buffer befüllt hat.}
						if(myResourceId <> 0 ) then
							claimCommunication( true );
							CheckBufPos( myResourceId, 2, 1, -1 );
							claimCommunication( false );
						endif;
					endif;
				endif;			
			endif;
		endif;
		
		if( DI_Bit0 OR DI_Bit1 OR DI_Bit2 OR DI_Bit3) then
			while( not RFIDAInventory() )
				wait 0.5 SEC;
			endwhile;
			{An Stopper B RFID lesen und Weiche stellen
			 ACHTUNG: Die Ansteuerung des RFID Lesegeräts ist in der Weiche vertauscht!
					  RFID A an Stopper B, RFID B an Stopper A}
			{RFID lesen}
			RFIDA_ReadMES( rfid, 'JunctionControl' );
			
			{Weichenstellung prüfen}
			if(myResourceId <> 0 ) then
				claimCommunication( true );
				GetShuntForTarget( myResourceId, 2, rfid.ResourceId, 1 );
				saveMESAnswer( mes );
				claimCommunication( false );
				
				if( mes.Parameter[1] = 2 ) then
					abbiegenLassen := true;
				else if( mes.Parameter[1] = 1 ) then
					abbiegenLassen := false;
				else 
					if( AbbiegeModus = 0 ) then
						WT_Ohne_Auftrag_Abbiegen_Lassen := false;
					else if( AbbiegeModus = 100 ) then
						WT_Ohne_Auftrag_Abbiegen_Lassen := true;
					else 
						WT_Ohne_Auftrag_Abbiegen_Lassen := not WT_Ohne_Auftrag_Abbiegen_Lassen;
					endif; endif;
					abbiegenLassen := WT_Ohne_Auftrag_Abbiegen_Lassen;
				endif; endif;
					
			else
				if( AbbiegeModus = 0 ) then
					WT_Ohne_Auftrag_Abbiegen_Lassen := false;
				else if( AbbiegeModus = 100 ) then
					WT_Ohne_Auftrag_Abbiegen_Lassen := true;
				else 
					WT_Ohne_Auftrag_Abbiegen_Lassen := not WT_Ohne_Auftrag_Abbiegen_Lassen;
				endif; endif;
				abbiegenLassen := WT_Ohne_Auftrag_Abbiegen_Lassen;
			endif;
			{Weiche stellen und WT Überfahrt abwarten}
			{if( mes.Parameter[1] = 2 ) then}
			if( abbiegenLassen AND not DI_Weichenbereich_Frei_Abbiegen) then
				{Abbiegen}
				DO_Ausschleusung := true;
				wait for not DI_Weiche_Gerade;
				wait for DI_Weiche_Abbiegen;
					
				DO_Stopper_vor_Ausschleusung := true;
				{wait for not (DI_Bit0 OR DI_Bit1 OR DI_Bit2 OR DI_Bit3);}
				while( RFIDAInventory() )
					wait 0.1 SEC;
				endwhile;
				DO_Stopper_vor_Ausschleusung := false; 
				
				wait for DI_Weichenbereich_Frei_Abbiegen;

				if( ActivateRobotinoMode ) then
				{ Für den Robotino das Band anhalten}
					FakeStopperAufAusschleusung := true;
					WAIT for WT_AufAusschleusung;
					{WAIT 0.625 sec;}
					DO_BandAusschleusung_Rechtslauf := false;

					{Warten auf Bandstillstand}
					wait 1.0 sec;					
					FakeStopperAufAusschleusung := false;

					{MES melden dass ein Pufferplatz belegt ist}
					if( myResourceId <> 0) then
						claimCommunication( true );
						if( rfid.PNo = 0 ) then 
							SetBufPosWithCheck( myResourceId, rfid.oNo, rfid.oPos, 1, 1, 0, 31, 0 );
						else
							SetBufPosWithCheck( myResourceId, rfid.oNo, rfid.oPos, 1, 1, 0, rfid.PNo, 0 );
						endif;
						claimCommunication( false );
					endif;	
				endif;
				
			else 
				{Geradeaus}
				DO_Ausschleusung := false;
				wait for DI_Weiche_Gerade;
				wait for not DI_Weiche_Abbiegen;
				
				wait for not DI_Weichenbereich_Frei_Gerade;
				
				DO_Stopper_vor_Ausschleusung := true;
				{wait for not (DI_Bit0 OR DI_Bit1 OR DI_Bit2 OR DI_Bit3);}
				while( RFIDAInventory() )
					wait 0.1 SEC;
				endwhile;
				DO_Stopper_vor_Ausschleusung := false; 

				wait for DI_Weichenbereich_Frei_Gerade;
			endif;	
		endif;
	endwhile;
ENDPROCESS;

{
 Weiche
}
PROCESS CPFactory_Weiche();
VAR
	INPUT BOOL	:	DI_StopperUnten	 AT 40;
	INPUT BOOL	:	DI_Bit0		 AT 41;
	INPUT BOOL	:	DI_Bit1		 AT 42;
	INPUT BOOL	:	DI_Bit2		 AT 43;
	INPUT BOOL	:	DI_Bit3	 	 AT 44;
	INPUT BOOL	:	DI_PaletteLinks	 AT 46;
	INPUT BOOL	:	DI_PaletteRechts AT 47;

	INPUT BOOL	: 	DI_Stauueberwachung AT 90;
	INPUT BOOL	: 	DI_Bandabschaltung  AT 91;
	
	OUTPUT BOOL	:	DO_BandRechtslauf   	AT 15;
	OUTPUT BOOL	:	DO_BandLinkslauf    	AT 16;
	OUTPUT BOOL	:	DO_BandSchleichgang 	AT 17;
	OUTPUT BOOL	:	DO_StopperSenken   	AT 39;
	
	REAL : nextResourceId;
	
	RFIDFields : rfid;
	MESFields : mes;
BEGIN
	{Band einschalten}
	DO_BandRechtslauf := true;	
	
	{MES Zustand initialisieren}
	setStateMESMode( true ); 
	setStateAuto( true ); 
	setStateReset( false ); 
	setStateError( -1 ); 
	
while( true )
	{Stopper ausfahren und auf WT warten}
	DO_StopperSenken := false; 
	{wait for DI_Bit0 OR DI_Bit1 OR DI_Bit2 OR DI_Bit3;}
	while( not RFIDBInventory() )
		wait 0.5 SEC;
	endwhile;


	nextResourceId := -1;		
	if( checkForWorkInThisStation( 2, rfid, mes, 'CPFactory_Weiche' ) ) then
		if( DI_Bandabschaltung ) then
			{Band stoppen}
			DO_BandRechtslauf := false;
		endif;
		
		if( myResourceId = 0 ) then
			{Standarablauf}
			nextResourceId := App(appId, mes);
		else
			nextResourceId := callApp( 2, appId, rfid, mes );
		endif;
	endif;
	
	{Findet der nächste Arbeitsschritt in dieser Station statt?}
	if( myResourceId = 0 OR nextResourceId <> myResourceId ) then
		{Falls nein: WT entlassen}		
		{Band starten}
		DO_BandRechtslauf := true;
		
		if( DI_Stauueberwachung ) then
			wait for not DI_PaletteRechts;
		endif;
		
		{Stopper einfahren und warten dass WT weiter gefahren ist}
		DO_StopperSenken := true;
		{wait for not( DI_Bit0 OR DI_Bit1 OR DI_Bit2 OR DI_Bit3 );}
		while( RFIDBInventory() )
			wait 0.1 SEC;
		endwhile;
		
		{Stopper ausfahren}
		DO_StopperSenken := false;
		wait for not DI_StopperUnten;
	endif;
endwhile;
ENDPROCESS;

PROCEDURE startGM(IN INT: gmId);
BEGIN
	CASE gmId OF
	WHEN 1: 
		RUN CPFactory_Weiche;
		RUN JunctionControl;
	ENDCASE;
ENDPROC;

PROCEDURE stopGM(IN INT: gmId);
BEGIN
	CASE gmId OF
	WHEN 1: 
		CANCEL CPFactory_Weiche;
		CANCEL JunctionControl;
	ENDCASE;
ENDPROC;
{
 Hauptmodul
}
PROCEDURE CPFactory_StartWeiche(IN INT: gmId; IN INT: _appId);
VAR
	INPUT BOOL	:	DI_SPSEnable 	 AT 16;
BEGIN
	appId := _appId;
	
while( true )
	setStateError( 0 );
	setStateAuto( false );
	
	WAIT FOR DI_SPSEnable;
	startGM(gmId);
	setStateError( -1 );
	setStateAuto( true );
	
	WAIT FOR NOT DI_SPSEnable;
	stopGM(gmId);

	resetAppOutputs();
endwhile;	

ENDPROC;
ENDPROGRAM;
